(()=>{"use strict";const e=async function(e,t){try{const n=`http://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=2856f7800e7e860f5f68bc404924d79f&units=${t}`,o=await fetch(n,{mode:"cors"});if(!o.ok)throw new Error("Location not found");return function(e){const{name:t,weather:[{main:n,icon:o}],main:{temp:r,feels_like:c,temp_min:i,temp_max:u,humidity:a,pressure:m},wind:{speed:d}}=e;return{city:t,main:n,icon:o,temperature:r,feels:c,low:i,high:u,humidity:a,pressure:m,windSpeed:d}}(await o.json())}catch(e){return alert(e),null}};function t(e){const t=document.querySelector(".city"),o=document.querySelector(".main-temp"),r=document.querySelector(".weather-main"),c=document.querySelector(".high-low"),i=document.querySelector(".main-image"),u=document.createElement("img"),a=document.querySelector(".feels"),m=document.querySelector(".humidity"),d=document.querySelector(".wind"),s=document.querySelector(".pressure"),l=function(e){return"metric"===n()?Math.round(3.6*e):Math.round(1.60934*e)}(e.windSpeed);t.textContent=e.city,o.textContent=`${e.temperature}째`,r.textContent=e.main,c.textContent=`H: ${e.high}째 L: ${e.low}째`,u.src=`http://openweathermap.org/img/wn/${e.icon}@2x.png`,a.textContent=`${e.feels}째`,m.textContent=`${e.humidity}%`,d.textContent=`${l} km/h`,s.textContent=`${e.pressure} hPa`,i.innerHTML="",i.appendChild(u)}function n(){return document.querySelector('input[type="checkbox"').checked?"imperial":"metric"}const o=document.querySelector("button"),r=document.querySelector("#cityName"),c=document.querySelector("form"),i=document.querySelector('input[type="checkbox"]');c.addEventListener("submit",(e=>{e.preventDefault()})),o.addEventListener("click",(async()=>{const o=n();t(await e(r.value,o))})),document.addEventListener("DOMContentLoaded",(async()=>{const o=n();t(await e("Vancouver",o))})),i.addEventListener("click",(async()=>{const o=document.querySelector(".city").textContent,r=n();t(await e(o,r))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,